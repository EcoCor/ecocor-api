<?xml version="1.0" encoding="UTF-8"?>
<project default="xar" name="ecocor" xmlns:if="ant:if">
  <property environment="env"/>
  <property name="build.dir" value="build"/>
  <property file="local.build.properties"/>
  <property file="build.properties"/>
  <xmlproperty file="expath-pkg.xml.tmpl"/>
  <tstamp>
    <format property="timestamp" pattern="hhmmss" />
  </tstamp>

  <!--
  inspired by
  https://stackoverflow.com/questions/2974106/how-to-lookup-the-latest-git-commit-hash-from-an-ant-build-script
  -->
  <available file=".git" type="dir" property="git.present"/>
  <target
    name="git.revision"
    description="Store git revision in ${package.version}"
    if="git.present"
  >
    <exec
      executable="git"
      outputproperty="git.revision"
      failifexecutionfails="false"
      errorproperty=""
    >
      <arg value="describe"/>
      <arg value="--tags"/>
      <arg value="--always"/>
      <arg value="--dirty"/>
    </exec>
    <!-- strip the leading 'v' from git.revision -->
    <exec executable="bash" outputproperty="git.version">
      <arg value="-c"/>
      <arg value="echo -n ${git.revision} | sed -e 's/^v//'"/>
    </exec>
    <condition property="package.version" value="${git.version}" else="unknown">
      <and>
        <isset property="git.version"/>
        <length string="${git.version}" trim="yes" length="0" when="greater"/>
      </and>
    </condition>
  </target>

  <target name="print.version" depends="git.revision">
    <echo  level="info" message="${package.version}"/>
  </target>

  <target name="create.dirs">
    <mkdir dir="${build.dir}"/>
  </target>

  <target
    name="xar"
    depends="create.dirs, git.revision"
    description="build an expath package">
    <property
      name="xarfile"
      value="${build.dir}/${project.abbrev}-${package.version}.xar"
    />
    <property name="symlink" value="${project.abbrev}-latest.xar"/>
    <delete file="${symlink}"/>
    <copy
      file="expath-pkg.xml.tmpl"
      tofile="expath-pkg.xml"
      filtering="true"
      overwrite="true"
    >
      <filterset>
        <filter token="package.version" value="${package.version}"/>
        <filter token="project.title" value="${project.title}"/>
        <filter token="project.abbrev" value="${project.abbrev}"/>
        <filter token="project.name" value="${project.name}"/>
        <filter
          token="project.processorversion"
          value="${project.processorversion}"/>
      </filterset>
    </copy>
    <zip basedir="." destfile="${xarfile}"
      excludes="${build.dir}/ test/ .* *build.properties adjust-conf-files.xsl build.xml Dockerfile compose.yml entrypoint.sh expath-pkg.xml.tmpl"/>
    <symlink
      resource="${build.dir}/${project.abbrev}-${package.version}.xar"
      link="${symlink}"
      overwrite="true"
    />
  </target>

  <target name="clean" description="remove builds">
    <delete dir="${build.dir}"/>
  </target>

  <target
    name="existdb.json"
    description="Create .existdb.json for editor integration"
  >
    <property name="editor.config.target" value=".existdb.json"/>
    <condition property="existdb.json.available">
      <available file="${editor.config.target}"/>
    </condition>
    <input
      message="Overwrite existing ${editor.config.target}?"
      validargs="y,n"
      addproperty="yes.or.no"
      if:true="${existdb.json.available}"
    />
    <condition property="overwrite" else="false">
      <equals arg1="${yes.or.no}" arg2="y"/>
    </condition>
    <copy
      file=".existdb.json.tmpl"
      tofile="${editor.config.target}"
      filtering="true"
      overwrite="${overwrite}"
    >
      <filterset>
        <filter token="docker.port" value="${docker.port}"/>
      </filterset>
    </copy>
  </target>
</project>
